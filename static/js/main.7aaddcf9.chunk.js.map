{"version":3,"sources":["intl/translate.ts","domain/support-lang.ts","comp/toggle-btn.tsx","domain/translate-repo.ts","comp/header.tsx","comp/example.tsx","comp/App.tsx","serviceWorker.ts","index.tsx"],"names":["loadIntl","lang","a","autoDetect","supportLanguages","ToggleButton","props","useState","toggle","setToggle","useEffect","onClick","useCallback","isDisable","onToggle","classes","useMemo","_classes","undefined","className","push","join","children","httpClient","basic","create","timeout","timeoutErrorMessage","getTranslate","request","config","withCredentials","headers","post","result","data","alert","console","error","Header","loadTr","event","preventDefault","loadTranslate","href","e","Example","id","downloadJsonBeautiful","file","element","document","createElement","reader","FileReader","onload","setAttribute","encodeURIComponent","name","style","display","body","appendChild","click","removeChild","readAsText","selectFile","input","type","promise","Promise","resolve","reject","onchange","target","files","App","toggledFromCode","setToggledFromCode","toggledToCodes","setToggledToCodes","tr","intl","useIntl","formatMessage","useTranslate","onToggleFromLanguage","toggled","code","fromButtons","buttons","map","it","key","unshift","toButtons","slice","filter","onToggleToLanguage","onClickSend","length","jsonFromLang","JSON","parse","fromLang","toLang","translationResponse","translation","translates","jsonBeautiful","stringify","File","log","onerror","then","catch","reason","onClickSendClasses","Boolean","window","location","hostname","match","IntlProvider","setLang","messages","setMessages","intlProviderClasses","locale","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7aaddcf9.chunk.js","sourcesContent":["import englishTranslate from './en.json'\r\nimport {useIntl} from 'react-intl';\r\nexport type LocaleMessages = typeof englishTranslate\r\n\r\nexport type SupportedLanguages = 'en' | 'ru'\r\n\r\nexport const loadIntl = async (lang: SupportedLanguages): Promise<LocaleMessages> => {\r\n    switch (lang) {\r\n        case 'en':\r\n            return import('./en.json');\r\n        case 'ru':\r\n            return import('./ru.json');\r\n        default:\r\n            return import('./en.json');\r\n    }\r\n}\r\n\r\nexport const useTranslate = () => {\r\n    const intl = useIntl()\r\n    return (id: string) => {\r\n        return intl.formatMessage({ id: id })\r\n    }\r\n}\r\n","export const autoDetect = {\r\n    \"code\": \"\",\r\n    \"name\": \"Auto\"\r\n}\r\n\r\nexport const supportLanguages = [\r\n    {\r\n        \"code\": \"af\",\r\n        \"name\": \"Afrikaans\"\r\n    },\r\n    {\r\n        \"code\": \"am\",\r\n        \"name\": \"Amharic\"\r\n    },\r\n    {\r\n        \"code\": \"bg\",\r\n        \"name\": \"Bulgarian\"\r\n    },\r\n    {\r\n        \"code\": \"ca\",\r\n        \"name\": \"Catalan\"\r\n    },\r\n    {\r\n        \"code\": \"zh-HK\",\r\n        \"name\": \"Chinese (Hong Kong)\"\r\n    },\r\n    {\r\n        \"code\": \"zh-CN\",\r\n        \"name\": \"Chinese (PRC)\"\r\n    },\r\n    {\r\n        \"code\": \"zh-TW\",\r\n        \"name\": \"Chinese (Taiwan)\"\r\n    },\r\n    {\r\n        \"code\": \"hr\",\r\n        \"name\": \"Croatian\"\r\n    },\r\n    {\r\n        \"code\": \"cs\",\r\n        \"name\": \"Czech\"\r\n    },\r\n    {\r\n        \"code\": \"da\",\r\n        \"name\": \"Danish\"\r\n    },\r\n    {\r\n        \"code\": \"nl\",\r\n        \"name\": \"Dutch\"\r\n    },\r\n    {\r\n        \"code\": \"en-AU\",\r\n        \"name\": \"English (AU)\"\r\n    },\r\n    {\r\n        \"code\": \"en-GB\",\r\n        \"name\": \"English (UK)\"\r\n    },\r\n    {\r\n        \"code\": \"en-US\",\r\n        \"name\": \"English (US)\"\r\n    },\r\n    {\r\n        \"code\": \"et\",\r\n        \"name\": \"Estonian\"\r\n    },\r\n    {\r\n        \"code\": \"fil\",\r\n        \"name\": \"Filipino\"\r\n    },\r\n    {\r\n        \"code\": \"fi\",\r\n        \"name\": \"Finnish\"\r\n    },\r\n    {\r\n        \"code\": \"fr-CA\",\r\n        \"name\": \"French (Canada)\"\r\n    },\r\n    {\r\n        \"code\": \"fr-FR\",\r\n        \"name\": \"French (France)\"\r\n    },\r\n    {\r\n        \"code\": \"de\",\r\n        \"name\": \"German\"\r\n    },\r\n    {\r\n        \"code\": \"el\",\r\n        \"name\": \"Greek\"\r\n    },\r\n    {\r\n        \"code\": \"hi\",\r\n        \"name\": \"Hindi\"\r\n    },\r\n    {\r\n        \"code\": \"hu\",\r\n        \"name\": \"Hungarian\"\r\n    },\r\n    {\r\n        \"code\": \"id / in\",\r\n        \"name\": \"Indonesian\"\r\n    },\r\n    {\r\n        \"code\": \"it\",\r\n        \"name\": \"Italian\"\r\n    },\r\n    {\r\n        \"code\": \"ja\",\r\n        \"name\": \"Japanese\"\r\n    },\r\n    {\r\n        \"code\": \"ko\",\r\n        \"name\": \"Korean\"\r\n    },\r\n    {\r\n        \"code\": \"lv\",\r\n        \"name\": \"Latvian\"\r\n    },\r\n    {\r\n        \"code\": \"lt\",\r\n        \"name\": \"Lithuanian\"\r\n    },\r\n    {\r\n        \"code\": \"ms\",\r\n        \"name\": \"Malay\"\r\n    },\r\n    {\r\n        \"code\": \"no\",\r\n        \"name\": \"Norwegian\"\r\n    },\r\n    {\r\n        \"code\": \"pl\",\r\n        \"name\": \"Polish\"\r\n    },\r\n    {\r\n        \"code\": \"pt-BR\",\r\n        \"name\": \"Portuguese (Brazil)\"\r\n    },\r\n    {\r\n        \"code\": \"pt-PT\",\r\n        \"name\": \"Portuguese (Portugal)\"\r\n    },\r\n    {\r\n        \"code\": \"ro\",\r\n        \"name\": \"Romanian\"\r\n    },\r\n    {\r\n        \"code\": \"ru\",\r\n        \"name\": \"Russian\"\r\n    },\r\n    {\r\n        \"code\": \"sr\",\r\n        \"name\": \"Serbian\"\r\n    },\r\n    {\r\n        \"code\": \"sk\",\r\n        \"name\": \"Slovak\"\r\n    },\r\n    {\r\n        \"code\": \"sl\",\r\n        \"name\": \"Slovenian\"\r\n    },\r\n    {\r\n        \"code\": \"es-419\",\r\n        \"name\": \"Spanish (Latin America)\"\r\n    },\r\n    {\r\n        \"code\": \"es-ES\",\r\n        \"name\": \"Spanish (Spain)\"\r\n    },\r\n    {\r\n        \"code\": \"sw\",\r\n        \"name\": \"Swahili\"\r\n    },\r\n    {\r\n        \"code\": \"sv\",\r\n        \"name\": \"Swedish\"\r\n    },\r\n    {\r\n        \"code\": \"th\",\r\n        \"name\": \"Thai\"\r\n    },\r\n    {\r\n        \"code\": \"tr\",\r\n        \"name\": \"Turkish\"\r\n    },\r\n    {\r\n        \"code\": \"uk\",\r\n        \"name\": \"Ukrainian\"\r\n    },\r\n    {\r\n        \"code\": \"zu\",\r\n        \"name\": \"Zulu\"\r\n    }\r\n]\r\n","import React, {useCallback, useEffect, useMemo, useState} from 'react';\r\nimport './toggle-btn.css'\r\n\r\ninterface Props {\r\n    className?: string\r\n    onToggle: (toggle: boolean) => void\r\n    toggle?: boolean\r\n    isDisable?: boolean\r\n}\r\n\r\nexport const ToggleButton: React.FC<Props> = (props) => {\r\n    const [toggle, setToggle] = useState(props.toggle)\r\n\r\n    useEffect(() => {\r\n        setToggle(props.toggle);\r\n    }, [props.toggle])\r\n\r\n    const onClick = useCallback(() => {\r\n        if(props.isDisable && toggle) {\r\n            return\r\n        }\r\n        props.onToggle(!toggle)\r\n        setToggle(!toggle)\r\n    }, [props, toggle])\r\n\r\n    const classes = useMemo(() => {\r\n        const _classes = []\r\n        if(props.className !== undefined) {\r\n            _classes.push(props.className)\r\n        }\r\n        if(toggle) {\r\n            _classes.push('toggled');\r\n        }\r\n        if(props.isDisable) {\r\n            _classes.push('disable')\r\n        }\r\n        return _classes\r\n    }, [props.className, props.isDisable, toggle])\r\n\r\n    return <button onClick={onClick} className={classes.join(' ')}>\r\n        {props.children}\r\n    </button>\r\n}\r\n","import basic, {AxiosRequestConfig} from 'axios';\r\n\r\nconst TIMEOUT = 100000\r\n\r\nconst httpClient = basic.create({\r\n    timeout: TIMEOUT,\r\n    timeoutErrorMessage: 'Request timeout, please try again later',\r\n})\r\n\r\nconst url = 'https://script.google.com/macros/s/AKfycbyqQy1QZK3zafaETAegLUDx1KbCgcQuphyu-UAQUI2uDyeqQKWI/exec'\r\n\r\nexport const getTranslate = async (request: TransitedRequest) => {\r\n    try {\r\n        const config: AxiosRequestConfig = {\r\n            withCredentials: false,\r\n            headers: {\r\n                \"Content-Type\": 'text/plain'\r\n            }\r\n        }\r\n        const result = await httpClient.post<TransitedResponse>(url, request, config)\r\n        return result.data\r\n    } catch (e) {\r\n        alert(`Error: ${e}`)\r\n        console.error(e)\r\n    }\r\n}\r\n\r\ninterface TransitedRequest {\r\n    fromLang: string,\r\n    toLang: string[],\r\n\r\n    data: object // example { 'keyOne': 'text', 'keyTwo': ['keyIn': 'text']}\r\n}\r\ninterface TransitedResponse {\r\n    translates: TransitedItem[]\r\n}\r\ninterface TransitedItem {\r\n    lang: string,\r\n    data: object\r\n}\r\n","import React, {useCallback} from 'react';\r\nimport {SupportedLanguages} from '../intl/translate';\r\n\r\ninterface Props {\r\n    loadTranslate: (lang: SupportedLanguages) => void\r\n}\r\nexport const Header: React.FC<Props> = (props) => {\r\n    const loadTr = useCallback((event: React.MouseEvent, lang: SupportedLanguages) => {\r\n        event.preventDefault();\r\n        props.loadTranslate(lang)\r\n    }, [props])\r\n    return <div className={'header'}>\r\n        <div className={'lang_tab'}>\r\n            <a href=\"/\" onClick={(e)=>loadTr(e, 'en')}>en</a>\r\n            <a href=\"/\" onClick={(e)=>loadTr(e, 'ru')}>ru</a>\r\n        </div>\r\n        <div>\r\n            <a href=\"https://github.com/Ovederax/json-translate-site\">to repository</a>\r\n        </div>\r\n    </div>\r\n}\r\n","import React from 'react';\r\nimport './example.css'\r\nimport {useTranslate} from '../intl/translate';\r\nimport {FormattedMessage} from 'react-intl';\r\n\r\nconst exampleCodeFrom = `{\r\n    \"Translate your JSON\": \"Translate your JSON\",\r\n    \"Chose language from\": \"Chose language from\",\r\n    \"homePage\": {\r\n        \"Chose language to\": \"Chose language to\",\r\n        \"Send\": \"Send\",\r\n        \"Download\": \"Download\",\r\n        \"Chose & Send\": \"Chose & Send\"\r\n    }\r\n}`\r\nconst exampleCodeTo = `{\r\n    \"Translate your JSON\": \"Переведите ваш JSON\",\r\n    \"Chose language from\": \"Выберите язык из\",\r\n    \"homePage\": {\r\n        \"Chose language to\": \"Выберите язык для\",\r\n        \"Send\": \"Послать\",\r\n        \"Download\": \"Скачать\",\r\n        \"Chose & Send\": \"Выбрать и отправить\"\r\n    }\r\n}`\r\nexport const Example: React.FC = () => {\r\n    return (\r\n        <div className={'example'}>\r\n            <div className={'example__left'}>\r\n                <h2>\r\n                    <FormattedMessage id=\"Example in Json file:\" />\r\n                </h2>\r\n                <pre>\r\n                    {exampleCodeFrom}\r\n                </pre>\r\n            </div>\r\n            <div className={'example__right'}>\r\n                <h2>\r\n                    <FormattedMessage id=\"Example out Json file:\" />\r\n                </h2>\r\n                <pre>\r\n                    {exampleCodeTo}\r\n                </pre>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect, useMemo, useState} from 'react';\r\nimport './App.css';\r\nimport {SupportedLanguages, useTranslate} from '../intl/translate';\r\nimport {autoDetect, supportLanguages} from '../domain/support-lang';\r\nimport {ToggleButton} from './toggle-btn';\r\nimport {getTranslate} from '../domain/translate-repo';\r\nimport {Header} from './header';\r\nimport {Example} from './example';\r\n\r\nfunction downloadJsonBeautiful(file: File) {\r\n    const element = document.createElement('a');\r\n    const reader = new FileReader()\r\n    reader.onload = () => {\r\n        element.setAttribute('target', '_blank')\r\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(reader.result as string));\r\n        element.setAttribute('download', file.name);\r\n\r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n\r\n        element.click();\r\n\r\n        document.body.removeChild(element);\r\n    }\r\n    reader.readAsText(file)\r\n}\r\n\r\nconst selectFile = async () => {\r\n    const input = (document.createElement('input')) as HTMLInputElement\r\n    input.type = 'file'\r\n    const promise = new Promise<File[]>(((resolve, reject) => {\r\n        input.onchange = (event: any) => {\r\n            if(event !== undefined) {\r\n                resolve(event?.target?.files)\r\n            }\r\n            reject()\r\n        }\r\n    }))\r\n\r\n    input.click();\r\n    return await promise\r\n}\r\n\r\ninterface Props {\r\n    loadTranslate: (lang: SupportedLanguages) => void\r\n}\r\n\r\nconst App: React.FC<Props> = (props) => {\r\n    const [toggledFromCode, setToggledFromCode] = useState('')\r\n    const [toggledToCodes, setToggledToCodes] = useState([] as string[])\r\n    const tr = useTranslate()\r\n\r\n    useEffect(() => {\r\n        setToggledFromCode('')\r\n    }, [])\r\n\r\n    const onToggleFromLanguage = (toggled: boolean, code: string) => {\r\n        if (toggled) {\r\n            setToggledFromCode(code)\r\n        }\r\n    }\r\n\r\n    const onToggleToLanguage = (toggled: boolean, code: string) => {\r\n        if (toggled) {\r\n            toggledToCodes.push(code)\r\n            setToggledToCodes(toggledToCodes.slice())\r\n        } else {\r\n            setToggledToCodes(toggledToCodes.filter(it => it !== code))\r\n        }\r\n    }\r\n\r\n    const fromButtons = useMemo(() => {\r\n        const buttons = supportLanguages.map((it) => {\r\n            return <ToggleButton toggle={it.code === toggledFromCode} key={it.code} onToggle={(toggled) => {\r\n                onToggleFromLanguage(toggled, it.code)\r\n            }} className={'big-button'} isDisable={it.code === toggledFromCode}>\r\n                {it.name}\r\n            </ToggleButton>\r\n        })\r\n        buttons.unshift(\r\n            <ToggleButton key={autoDetect.code} onToggle={(toggled) => {\r\n                onToggleFromLanguage(toggled, autoDetect.code)\r\n            }} className={'big-button'} toggle={autoDetect.code === toggledFromCode}\r\n            isDisable={autoDetect.code === toggledFromCode}>\r\n                {autoDetect.name}\r\n            </ToggleButton>\r\n        )\r\n        return buttons\r\n    }, [toggledFromCode])\r\n\r\n\r\n    const toButtons = supportLanguages.map((it) => {\r\n        return <ToggleButton key={it.code} onToggle={(toggled) => {\r\n            onToggleToLanguage(toggled, it.code)\r\n        }} className={'big-button'}>\r\n            {it.name}\r\n        </ToggleButton>\r\n    })\r\n\r\n    const onClickSend = useCallback(async (event: React.MouseEvent) => {\r\n        event.preventDefault()\r\n        if (toggledToCodes.length === 0) {\r\n            return;\r\n        }\r\n        const files = await selectFile()\r\n        if (files === undefined || files.length < 1) {\r\n            return\r\n        }\r\n        const promise = new Promise<File>(((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.readAsText(files[0]);\r\n            reader.onload = async function () {\r\n                if (typeof reader.result == 'string') {\r\n                    try {\r\n                        const jsonFromLang = JSON.parse(reader.result)\r\n                        const translationResponse = await getTranslate({\r\n                            fromLang: toggledFromCode,\r\n                            toLang: toggledToCodes,\r\n                            data: jsonFromLang\r\n                        })\r\n                        if(translationResponse === undefined) {\r\n                            reject()\r\n                            return;\r\n                        }\r\n\r\n                        let translation: undefined | object\r\n                        if(toggledToCodes.length === 1) {\r\n                            translation = translationResponse.translates[0].data\r\n                        } else {\r\n                            translation = translationResponse.translates\r\n                        }\r\n\r\n                        const jsonBeautiful = JSON.stringify(translation, null, 4)\r\n                        const file = new File([jsonBeautiful], 'out.json')\r\n                        resolve(file)\r\n                    } catch (e) {\r\n                        reject()\r\n                        console.log(e)\r\n                        alert('Wrong file format')\r\n                    }\r\n                }\r\n            };\r\n            reader.onerror = function () {\r\n                reject(reader.error)\r\n            };\r\n        }))\r\n\r\n        promise.then((result: File) => {\r\n            downloadJsonBeautiful(result)\r\n        }).catch((reason => {\r\n            console.log(reason);\r\n        }))\r\n    }, [toggledFromCode, toggledToCodes]);\r\n\r\n    const onClickSendClasses = useMemo(() => {\r\n        const classes = ['btn big-button']\r\n        if(toggledToCodes.length === 0) {\r\n            classes.push('disable')\r\n        }\r\n        return classes\r\n    }, [toggledToCodes]);\r\n\r\n    return (\r\n        <div className='container'>\r\n            <Header loadTranslate={props.loadTranslate} />\r\n            <div className='intro'>\r\n                <h1>\r\n                    {tr('Translate your JSON')}\r\n                </h1>\r\n            </div>\r\n\r\n            <div className=\"options\">\r\n                <div className={'options__item'}>\r\n                    <h2>{tr('Chose language from')}</h2>\r\n                    <div className=\"toggled_buttons\">\r\n                        {fromButtons}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={'options__item'}>\r\n                    <h2>{tr('Chose language to')}</h2>\r\n                    <div className=\"toggled_buttons\">\r\n                        {toButtons}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Example />\r\n            <div className={'submit'}>\r\n                <button className={onClickSendClasses.join(' ')} onClick={onClickSend}>{tr('Chose & Send')}</button>\r\n            </div>\r\n        </div>);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './comp/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {loadIntl, LocaleMessages, SupportedLanguages} from './intl/translate';\r\nimport { IntlProvider as ReactIntlProvider } from 'react-intl'\r\n\r\nconst IntlProvider: React.FC = () => {\r\n    const [lang, setLang] = useState('en' as SupportedLanguages)\r\n    const [messages, setMessages] = useState(undefined as LocaleMessages | undefined)\r\n\r\n    const loadTranslate = useCallback(async () => {\r\n        const messages = await loadIntl(lang)\r\n        setLang(lang)\r\n        setMessages(messages)\r\n    }, [lang, setMessages, setLang])\r\n\r\n    useEffect(() => {\r\n        const ignore = loadTranslate();\r\n    }, [setMessages, loadTranslate])\r\n\r\n    const setNewTranslate = (lang: SupportedLanguages) => {\r\n        setLang(lang)\r\n    }\r\n\r\n    const intlProviderClasses = ['ghost']\r\n    if(messages) {\r\n        intlProviderClasses.push('ghost-show')\r\n    }\r\n\r\n    return <div className={intlProviderClasses.join(' ')}>\r\n        {\r\n            messages?\r\n                ( <ReactIntlProvider messages={messages} locale={lang}>\r\n                        <App loadTranslate={setNewTranslate}/>\r\n                    </ReactIntlProvider>\r\n                ) : ''\r\n        }\r\n    </div>\r\n\r\n\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <IntlProvider />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}